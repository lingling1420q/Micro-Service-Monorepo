// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: pkg/proto/svc1/svc1.proto

package svc1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Svc1 service

func NewSvc1Endpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Svc1 service

type Svc1Service interface {
	CallSvc2(ctx context.Context, in *CallSvc2Request, opts ...client.CallOption) (*CallSvc2Response, error)
}

type svc1Service struct {
	c    client.Client
	name string
}

func NewSvc1Service(name string, c client.Client) Svc1Service {
	return &svc1Service{
		c:    c,
		name: name,
	}
}

func (c *svc1Service) CallSvc2(ctx context.Context, in *CallSvc2Request, opts ...client.CallOption) (*CallSvc2Response, error) {
	req := c.c.NewRequest(c.name, "Svc1.CallSvc2", in)
	out := new(CallSvc2Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Svc1 service

type Svc1Handler interface {
	CallSvc2(context.Context, *CallSvc2Request, *CallSvc2Response) error
}

func RegisterSvc1Handler(s server.Server, hdlr Svc1Handler, opts ...server.HandlerOption) error {
	type svc1 interface {
		CallSvc2(ctx context.Context, in *CallSvc2Request, out *CallSvc2Response) error
	}
	type Svc1 struct {
		svc1
	}
	h := &svc1Handler{hdlr}
	return s.Handle(s.NewHandler(&Svc1{h}, opts...))
}

type svc1Handler struct {
	Svc1Handler
}

func (h *svc1Handler) CallSvc2(ctx context.Context, in *CallSvc2Request, out *CallSvc2Response) error {
	return h.Svc1Handler.CallSvc2(ctx, in, out)
}
